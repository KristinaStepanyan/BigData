# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv
name, param1, param2, param3 = argv

print('Выработка: ', param1)
print('Ставка: ', param2)
print('Премия: ', param3)
salary = float(param1) * float(param2) + float(param3)
print(salary)

# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего
# элемента. Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.

my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [my_list[i+1] for i in range(len(my_list) - 1) if my_list[i] < my_list[i+1]]
print(new_list)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

print([x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0])

# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив
# чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения
# задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [x for x in my_list if my_list.count(x) == 1]
print(new_list)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны
# войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения
# всех элементов списка.

from functools import reduce

def my_func(prev_el, el):
    return prev_el * el
my_list = [x for x in range(100, 1001) if x % 2 == 0]
print(reduce(my_func, my_list))

# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен
# быть бесконечным. Необходимо предусмотреть условие его завершения.

from itertools import count, cycle
# a)
for i in count(start= 6):
    print(i)
    if i > 27:
        break

# b)
names = ['Kristina', 'Sasha', 'Petr', 'Masha']
for i, name in enumerate(cycle(names)):
    print(name)
    if i > 14:
        break
